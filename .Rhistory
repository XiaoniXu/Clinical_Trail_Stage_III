getwd
getwd()
getwd()
install.packages("ggpubr")
getwd()
install.packages("ggpubr")
install.packages("RColorBrewer")
getwd()
setwd("C:/Users/berns/Desktop/PTA/Robinson/Clinical_Trail_Stage_III/WeekOne")
getwd()
library(dplyr)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(reactable)
library(reactablefmtr)
library(htmltools)
library(fontawesome)
library(DT)
library(klippy)
# Data Manipulation
# 1. Read data `starwars` from data folder.
starwars <- read.csv("data/starwars.csv")
# 2. Print the first 6 rows of `starwars`
head(starwars)
# 1. Checking structure of `starwars`. you can you use str(starwars)
dplyr::glimpse(starwars)
# 2. Checking summary of `starwars`.
summary(starwars)
# 2. Checking summary of `starwars`.
summary(starwars)
# 3. List of column names of `starwars`.
colnames(starwars)
# Select the firs 4 rows and columns name, homeworld with R base
starwars[c(1:4), c('name', 'homeworld')]
# Select the firs 4 rows and columns name, homeworld with R base using index
starwars[c(1:4), c(1, 9)]
# using dplyr
# Select the firs 4 rows and columns name, homeworld
starwars %>% slice(1:4) %>% dplyr::select(name, homeworld)
# Select the firs 4 rows and columns name, homeworld with index
starwars %>% slice(1:4) %>% dplyr::select(1, 9)
# Select the firs 4 rows and choose all columns BUT name
starwars %>% slice(1:4) %>% dplyr::select(-name)
# Select the firs 4 rows and choose only columns containing an underscore
starwars %>% slice(1:4) %>% dplyr::select(contains("_"))
# Select the firs 4 rows and choose only columns beginning with "s"
starwars %>% slice(1:4) %>% dplyr::select(starts_with("s"))
# 1. Select columns name, mass, homeworld and filter only characters with their Weight greater than the average of the Weight for all characters using dplyr
starwars %>% filter(mass > mean(mass, na.rm = TRUE)) %>% dplyr::select(name,mass, homeworld)
# 2. Select columns name, species, homeworld and and filter only characters with species == "Human"
filter(starwars, species == "Human") %>% dplyr::select(name, species, homeworld)
# 3. Select columns name, hair_color, homeworld, eye_color and and filter only characters with hair_color is "none" and  eye_color is "black"
filter(starwars, hair_color == "none" & eye_color == "black") %>% dplyr::select(name, hair_color,homeworld, eye_color )
# 4. Select columns name, hair_color, homeworld, eye_color and and filter only characters with weight greater than 1000 and height greater than 150
starwars %>% filter(mass >1000 & height > 150) %>% dplyr::select(name, hair_color,homeworld, eye_color )
# 5. Within group Gender, select columns gender, mass, name, hair_color, eye_color eye_color and filter only characters with their Weight greater than the average of the Weight for all characters.
starwars %>% group_by(gender) %>% filter(mass > mean(mass, na.rm = TRUE)) %>% dplyr::select(gender, mass, name, hair_color, eye_color )
# Select variable name, mass, species. Create a new variable name mass_norm, which use mass divide by mean of mass
starwars %>%
select(name, mass, species) %>%
mutate(mass_norm = mass / mean(mass, na.rm = TRUE))
starwars %>%
select(name, height, mass, homeworld, species) %>%
group_by(species) %>%
mutate(mass_norm = mass / mean(mass, na.rm = TRUE))
# Select variable name, height, mass, homeworld. Create a variable mass2 by mass x 2 then mass2 x mass2
starwars %>%
select(name, height, mass, homeworld) %>%
mutate(
mass2 = mass * 2,
mass2_squared = mass2 * mass2
)
# As well as adding new variables, you can use mutate() to
# remove variables and modify existing variables.
starwars %>%
select(name, height, mass, homeworld) %>%
mutate(
mass = NULL,
height = height * 0.0328084 # convert to feet
)
# Use across() with mutate() to apply a transformation
# to multiple columns in a tibble.
starwars %>%
select(name, homeworld, species) %>%
mutate(across(!name, as.factor))
# 1. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class`
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = class))  +
geom_point(size = 3)
p
# 2. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class` and add color style and linear regression line
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = class))  +
geom_point(size = 3) +
geom_smooth(method = "lm", formula = "y ~ x", alpha = 0.3) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Display", y = "Highway", fill = "Class", color = "Class")
p
# 3. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class` and  `facet_grid(vars(cyl)`
p <- ggplot(mpg, aes(displ, hwy, colour = class))  +
geom_point(size = 3) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
facet_grid(vars(cyl), scales = "free")
p
knitr::opts_chunk$set(echo = TRUE)
options(reactable.static = TRUE)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(reactable)
library(reactablefmtr)
library(htmltools)
library(dplyr)
library(fontawesome)
library(DT)
library(klippy) # remotes::install_github("rlesur/klippy")
# renv::settings$snapshot.type("all")
# renv::snapshot()
library(arsenal)  #  install.packages("arsenal")
# Add copy to clibboard
klippy::klippy(
lang = c("r", "markdown"),
all_precode = TRUE,
position = c("top", "right"),
color = "white",
tooltip_message = "Click to copy",
tooltip_success = "Copied!"
)
tf <- tempfile(fileext = c(".Rmd", ".html"))
writeLines(
c("```{r klippy, echo=FALSE, include=TRUE}",
"klippy::klippy()",
"```",
"Insert this chunk in your `Rmd` file:",
"````markdown",
"`r ''````{r klippy, echo=FALSE, include=TRUE}",
"klippy::klippy()",
"```",
"````"
),
tf[1]
)
if (FALSE) {
rmarkdown::render(tf[1], "html_document", tf[2])
browseURL(paste0("file://", tf[2]))}
# https://stackoverflow.com/questions/71621136/rmarkdown-yaml-section-add-authors-hyperlink-email-to-footer
knitr::opts_chunk$set(echo = TRUE)
writeLines(
sprintf(
'&nbsp;
<h5 style="text-align: center;color:#465362;"> Thank you for reading </h5>
<hr style="height:2px;border-width:0;color:#184558;background-color:#184558">
<div class="footer">
<p style="text-align: center;">R Shiny with <a href="https://github.com/%s/">%s</a></p>
<p style="text-align: center;"><span style="color: #808080;"><em><a href="mailto:%s">%s</a></em></span></p>
<!-- Add icon library -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<!-- Add font awesome icons -->
<p style="text-align: center;">
<a href="https://twitter.com/%s?lang=en" class="fa fa-twitter"></a>
<a href="https://www.linkedin.com/in/%s/" class="fa fa-linkedin"></a>
<a href="https://github.com/%s/" class="fa fa-github"></a>
<a href="https://youtube.com/@%s/" class="fa fa-youtube"></a>
</p>
</div>
&nbsp;',
params$github,
params$author,
params$email,
params$email,
params$twitter,
params$linkedin,
params$github,
params$youtube
),
'after.html'
)
calc_numeric_statistics <- function(df, var, group) {
var = ensym(var)
group = ensym(group)
df %>%
group_by(!!group) %>%
dplyr::summarise(
n = dplyr::n(),
mean = mean(!!var, na.rm = TRUE),
sd = sd(!!var, na.rm = TRUE),
min = min(!!var, na.rm = TRUE),
max = max(!!var, na.rm = TRUE),
median = median(!!var, na.rm = TRUE),
p25 = quantile(!!var, 0.25, na.rm = TRUE),
p75 = quantile(!!var, 0.75, na.rm = TRUE))
}
calc_numeric_statistics(adsl, CGISGR1N, ARM)

# 2. Using `mpg` data from `ggplot2` package, plot the propotion of manufacturer by color `class`
p <- ggplot(data = mpg, aes(x = manufacturer,fill = as.character(cyl)))  +
geom_bar(position = "fill")
library(dplyr)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(reactable)
library(reactablefmtr)
library(htmltools)
library(fontawesome)
library(DT)
library(klippy)
# Data Manipulation
# Read Data
# 1. Read data `starwars` from data folder.
starwars <- read.csv("data/starwars.csv")
# 2. Print the first 6 rows of `starwars`
head(starwars)
# Structure glimpse()
# 1. Checking structure of `starwars`. you can you use str(starwars)
dplyr::glimpse(starwars)
# 2. Checking summary of `starwars`.
summary(starwars)
# 3. List of column names of `starwars`.
colnames(starwars)
# Selecting select()
# Select the firs 4 rows and columns name, homeworld with R base
starwars[c(1:4), c('name', 'homeworld')]
# Select the firs 4 rows and columns name, homeworld with R base using index
starwars[c(1:4), c(1, 9)]
# using dplyr
# Select the firs 4 rows and columns name, homeworld
starwars %>% slice(1:4) %>% dplyr::select(name, homeworld)
# Select the firs 4 rows and columns name, homeworld with index
starwars %>% slice(1:4) %>% dplyr::select(1, 9)
# Select the firs 4 rows and choose all columns BUT name
starwars %>% slice(1:4) %>% dplyr::select(-name)
# Select the firs 4 rows and choose only columns containing an underscore
starwars %>% slice(1:4) %>% dplyr::select(contains("_"))
# Select the firs 4 rows and choose only columns beginning with "s"
starwars %>% slice(1:4) %>% dplyr::select(starts_with("s"))
# Filtering filter()
# 1. Select columns name, mass, homeworld and filter only characters with their Weight greater than the average of the Weight for all characters using dplyr
starwars %>% filter(mass > mean(mass, na.rm = TRUE)) %>% dplyr::select(name,mass, homeworld)
# 2. Select columns name, species, homeworld and and filter only characters with species == "Human"
filter(starwars, species == "Human") %>% dplyr::select(name, species, homeworld)
# 3. Select columns name, hair_color, homeworld, eye_color and and filter only characters with hair_color is "none" and  eye_color is "black"
filter(starwars, hair_color == "none" & eye_color == "black") %>% dplyr::select(name, hair_color,homeworld, eye_color )
# 4. Select columns name, hair_color, homeworld, eye_color and and filter only characters with weight greater than 1000 and height greater than 150
starwars %>% filter(mass >1000 & height > 150) %>% dplyr::select(name, hair_color,homeworld, eye_color )
# 5. Within group Gender, select columns gender, mass, name, hair_color, eye_color eye_color and filter only characters with their Weight greater than the average of the Weight for all characters.
starwars %>% group_by(gender) %>% filter(mass > mean(mass, na.rm = TRUE)) %>% dplyr::select(gender, mass, name, hair_color, eye_color )
# Create new variables mutate()
# without group
# Select variable name, mass, species. Create a new variable name mass_norm, which use mass divide by mean of mass
starwars %>%
select(name, mass, species) %>%
mutate(mass_norm = mass / mean(mass, na.rm = TRUE))
# Select variable name, height, mass, homeworld, species. Create a new variable name mass_norm within group of species, which use mass divide by mean of mass
starwars %>%
select(name, height, mass, homeworld, species) %>%
group_by(species) %>%
mutate(mass_norm = mass / mean(mass, na.rm = TRUE))
# Select variable name, height, mass, homeworld. Create a variable mass2 by mass x 2 then mass2 x mass2
starwars %>%
select(name, height, mass, homeworld) %>%
mutate(
mass2 = mass * 2,
mass2_squared = mass2 * mass2
)
# As well as adding new variables, you can use mutate() to
# remove variables and modify existing variables.
starwars %>%
select(name, height, mass, homeworld) %>%
mutate(
mass = NULL,
height = height * 0.0328084 # convert to feet
)
# Use across() with mutate() to apply a transformation
# to multiple columns in a tibble.
starwars %>%
select(name, homeworld, species) %>%
mutate(across(!name, as.factor))
# Data Visualization with ggplot2 and ggpubr
# Scatter plot
# 1. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class`
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = class))  +
geom_point(size = 3)
p
# 2. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class` and add color style and linear regression line
p <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = class))  +
geom_point(size = 3) +
geom_smooth(method = "lm", formula = "y ~ x", alpha = 0.3) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
labs(x = "Display", y = "Highway", fill = "Class", color = "Class")
p
# 3. Using `mpg` data from `ggplot2` package, plot `disl` and `hwy` with color by `class` and  `facet_grid(vars(cyl)`
p <- ggplot(mpg, aes(displ, hwy, colour = class))  +
geom_point(size = 3) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
facet_grid(vars(cyl), scales = "free")
p
# Bar chart
# 1. Using `mpg` data from `ggplot2` package, plot the number of manufacturer by color `class`
p <- ggplot(data = mpg, aes(x = manufacturer,fill = as.character(cyl)))   +
geom_bar(position = "stack") +
scale_fill_brewer(palette = "BuPu")
p
# 2. Using `mpg` data from `ggplot2` package, plot the propotion of manufacturer by color `class`
p <- ggplot(data = mpg, aes(x = manufacturer,fill = as.character(cyl)))  +
geom_bar(position = "fill")
p
# Load data
data("mtcars")
dfm <- mtcars
# Convert the cyl variable to a factor
dfm$cyl <- as.factor(dfm$cyl)
# Add the name colums
dfm$name <- rownames(dfm)
ggbarplot(dfm, x = "name", y = "mpg",
fill = "cyl",               # change fill color by cyl
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "desc",          # Sort the value in dscending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 90           # Rotate vertically x axis texts
)
ggbarplot(dfm, x = "name", y = "mpg",
fill = "cyl",               # change fill color by cyl
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "asc",           # Sort the value in dscending order
sort.by.groups = TRUE,      # Sort inside each group
x.text.angle = 90           # Rotate vertically x axis texts
)
set.seed(1234)
wdata = data.frame(
sex = factor(rep(c("F", "M"), each=200)),
weight = c(rnorm(200, 55), rnorm(200, 58)))
head(wdata, 4)
# Density plot with mean lines and marginal rug
# Change outline and fill colors by groups ("sex")
# Use custom palette
ggdensity(data = wdata, x = "weight",
add = "mean", rug = TRUE,
color = "sex", fill = "sex",
palette = c("#00AFBB", "#E7B800"))
# Histogram plot with mean lines and marginal rug
# Change outline and fill colors by groups ("sex")
# Use custom color palette
gghistogram(data = wdata, x = "weight",
add = "mean", rug = TRUE,
color = "sex", fill = "sex",
palette = c("#00AFBB", "#E7B800"))
# Box plots
# Load data
data("ToothGrowth")
df <- ToothGrowth
head(df, 4)
# Box plots with jittered points
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
p <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
p
# Add p-values comparing groups
# Specify the comparisons you want
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)
# Violin plots
# Violin plots with box plots inside
# Change fill color by groups: dose
# add boxplot with white fill color
ggviolin(df, x = "dose", y = "len", fill = "dose",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"))+
stat_compare_means(comparisons = my_comparisons, label = "p.signif")+ # Add significance levels
stat_compare_means(label.y = 50)
# Deviation graphs
# Calculate the z-score of the mpg data
dfm$mpg_z <- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)
dfm$mpg_grp <- factor(ifelse(dfm$mpg_z < 0, "low", "high"),
levels = c("low", "high"))
# Inspect the data
head(dfm[, c("name", "wt", "mpg", "mpg_z", "mpg_grp", "cyl")])ggbarplot(dfm, x = "name", y = "mpg_z",
# Deviation graphs
# Calculate the z-score of the mpg data
dfm$mpg_z <- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)
dfm$mpg_grp <- factor(ifelse(dfm$mpg_z < 0, "low", "high"),
levels = c("low", "high"))
# Inspect the data
head(dfm[, c("name", "wt", "mpg", "mpg_z", "mpg_grp", "cyl")])
ggbarplot(dfm, x = "name", y = "mpg_z",
fill = "mpg_grp",           # change fill color by mpg_level
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "asc",           # Sort the value in ascending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 90,          # Rotate vertically x axis texts
ylab = "MPG z-score",
xlab = FALSE,
legend.title = "MPG Group"
)
ggbarplot(dfm, x = "name", y = "mpg_z",
fill = "mpg_grp",           # change fill color by mpg_level
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "asc",           # Sort the value in ascending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 90,          # Rotate vertically x axis texts
ylab = "MPG z-score",
xlab = FALSE,
legend.title = "MPG Group"
)
ggbarplot(dfm, x = "name", y = "mpg_z",
fill = "mpg_grp",           # change fill color by mpg_level
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "desc",          # Sort the value in descending order
sort.by.groups = FALSE,     # Don't sort inside each group
x.text.angle = 90,          # Rotate vertically x axis texts
ylab = "MPG z-score",
legend.title = "MPG Group",
rotate = TRUE,
ggtheme = theme_minimal()
)
ggdotchart(dfm, x = "name", y = "mpg",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "ascending",                        # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
ggtheme = theme_pubr()                        # ggplot2 theme
)
ggdotchart(dfm, x = "name", y = "mpg",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(dfm$mpg),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
ggdotchart(dfm, x = "name", y = "mpg_z",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(dfm$mpg_z,1),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)+
geom_hline(yintercept = 0, linetype = 2, color = "lightgray")
# Dot charts
# Lolipop chart
ggdotchart(dfm, x = "name", y = "mpg",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "ascending",                        # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
ggtheme = theme_pubr()                        # ggplot2 theme
)
ggdotchart(dfm, x = "name", y = "mpg",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(dfm$mpg),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
ggdotchart(dfm, x = "name", y = "mpg_z",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
add.params = list(color = "lightgray", size = 2), # Change segment color and size
group = "cyl",                                # Order by groups
dot.size = 6,                                 # Large dot size
label = round(dfm$mpg_z,1),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 9,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)+
geom_hline(yintercept = 0, linetype = 2, color = "lightgray")
# Cleveland's dot plot
ggdotchart(dfm, x = "name", y = "mpg",
color = "cyl",                                # Color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
rotate = TRUE,                                # Rotate vertically
dot.size = 2,                                 # Large dot size
y.text.col = TRUE,                            # Color y text by groups
ggtheme = theme_pubr()                        # ggplot2 theme
)+
theme_cleveland()
# RColorBrewer
# Display color RColorBrewer
display.brewer.all(colorblindFriendly = TRUE)
